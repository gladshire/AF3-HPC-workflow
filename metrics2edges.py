import os
import csv
import argparse
import itertools as it
import pandas as pd


def main():

    parser = argparse.ArgumentParser(description="Tool for generating Cytoscape edge mappings file from AF3 metrics CSV")

    parser.add_argument("--filename", action="store", dest="filename", required=True,
            help="Filename of AF3 metrics CSV, as generated by 'get_metrics.py'")
    parser.add_argument("--cluster_filename", action="store", dest="cluster", required=True,
            help="Filename of clusters / complexes")
    parser.add_argument("--metric", action="store", dest="metric", required=True,
            help="Metric (ipTM, ipSAE, etc) to generate edges for")
    parser.add_argument("--output_filename", action="store", dest="out_filename", required=True, help="Output filename")

    args = parser.parse_args()

    if not args.filename:
        print("\nError: Specify --filename \n")
        parser.print_help()
        return

    if not args.cluster:
        print("\nError: Specify --cluster_filename \n")
        parser.print_help()
        return

    if not args.metric:
        print("\nError: Specify --metric \n")
        parser.print_help()
        return

    try:
        metrics_df = pd.read_csv(args.filename)
    except RuntimeError:
        print(f"\nError: Cannot open {args.filename}")
        exit()

    try:
        metric = metrics_df[['Gene1','Gene2',args.metric]]
    except KeyError:
        print(f"\nError: Metric {args.metric} not found")
        exit()


    with open(f"pairs_{args.metric}.txt", 'w') as out_edges:
        outWriter = csv.writer(out_edges, delimiter="\t")

        for index, pair in metric.iterrows():

            gene_id1 = pair['Gene1']
            gene_id2 = pair['Gene2']

            score = pair[args.metric]

            outWriter.writerow([gene_id1, gene_id2, score])

    # Execute pairwise2clusterid.py
    #cmd_str = f"python3 pairwise2clusterid.py --pairwise_filename edges_{args.metric}.txt --cluster_filename {
    cmd_list = ["python3", "pairwise2clusterid.py",
                "--pairwise_filename", f"pairs_{args.metric}.txt",
                "--cluster_filename", args.cluster,
                "--output_filename",args.out_filename]
    cmd_str = " ".join(cmd_list)

    print(cmd_str)
    os.system(cmd_str)




if __name__ == "__main__":
    main()
